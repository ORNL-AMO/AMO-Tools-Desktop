name: "Release: Desktop"

on:
  workflow_call:

permissions:
  contents: write

jobs:
  build:
    if: github.ref_name == 'master'
    runs-on: [self-hosted, build]
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 1
      - name: Get Node version
        run: echo "BUILD_NODE_VER=$(ggrep -o -P -m 1 '(?<=node":\s").*(?=")' package.json)" >> "$GITHUB_ENV"
      - name: Node setup
        run: source ~/load_nvm.sh && nvm install ${{ env.BUILD_NODE_VER }}
      - name: Cache setup
        uses: actions/cache@v4
        with:
          path: ~/.npm
          key: npm-${{ hashFiles('package-lock.json') }}
          restore-keys: npm-
      - name: Dependency setup
        run: |
          PROV_PROF_PATH=$RUNNER_TEMP/embedded.provisionprofile
          WIN_CERT_PATH=$RUNNER_TEMP/wincert.pem
          echo -n "${{ secrets.WIN_CERT_BASE64 }}" | base64 --decode -o $WIN_CERT_PATH &&
          cp "$WIN_CERT_PATH" ./wincert.pem
          echo -n "${{ secrets.APPLE_PROV_PROF_BASE64 }}" | base64 --decode -o $PROV_PROF_PATH &&
          cp "$PROV_PROF_PATH" ./embedded.provisionprofile
          find . -name "package-lock.json" -not -path "*/node_modules/*" -not -path "*/dist/*" -exec dirname {} \; | sort -u |
          while read dir; do
            echo "Installing dependencies for: $dir"
            (cd $dir && npm ci $dir);
          done
          security -v unlock-keychain -p "${{ secrets.KC_SECRET }}" ~/Library/Keychains/login.keychain-db
      - name: Build
        run: npm run build-prod-desktop-ci
      - name: Package
        run: |
          node ./node_modules/.bin/electron-builder --mac --universal --publish never &
          node ./node_modules/.bin/electron-builder --win --x64 --publish never &
          node ./node_modules/.bin/electron-builder --linux --x64 --publish never
      - name: Prepare output
        id: output
        run: |
          VERSION=$(ggrep -A3 'version:' output/latest-mac.yml | head -n1 | awk '{print $2}')
          echo "BUILD_VERSION=$VERSION" >> "$GITHUB_OUTPUT"
      - name: Upload notarization artifact
        uses: actions/upload-artifact@v4
        with:
          name: notarize-mac-artifact
          path: |
            output/*.dmg
          compression-level: 1
          if-no-files-found: error
          retention-days: 1
      - name: Upload signing artifact
        uses: actions/upload-artifact@v4
        with:
          name: sign-win-artifact
          path: |
            output/*.exe
            output/latest.yml
          compression-level: 1
          if-no-files-found: error
          retention-days: 1
      - name: Upload remaining artifacts
        uses: actions/upload-artifact@v4
        with:
          name: release-1-output
          path: |
            output/*.AppImage
            output/*.blockmap
            output/*.tar.gz
            output/*.zip
            output/latest-*.yml
          compression-level: 1
          if-no-files-found: error
          retention-days: 1
    outputs:
      BUILD_VERSION: ${{ steps.output.outputs.BUILD_VERSION }}

  notarize:
    if: github.ref_name == 'master'
    runs-on: macos-13
    needs: [build]
    steps:
      - name: Get artifacts
        uses: actions/download-artifact@v4
        with:
          name: notarize-mac-artifact
          path: output/
      - name: Notarize
        run: |
          BUNDLE_PATH=$(find output -name "MEASUR-*.*.*.dmg")
          xcrun notarytool submit --wait --apple-id "${{ secrets.APPLE_ID }}" --password "${{ secrets.APPLE_APP_SECRET }}" --team-id "${{ secrets.APPLE_TEAM_ID }}" $BUNDLE_PATH &&
          sleep 60 &&
          xcrun stapler staple $BUNDLE_PATH
      - name: Upload notarized artifact
        uses: actions/upload-artifact@v4
        with:
          name: release-2-artifact
          path: |
            output/*.dmg
          compression-level: 1
          if-no-files-found: error
          retention-days: 1

  sign:
    if: github.ref_name == 'master'
    runs-on: [self-hosted, cs]
    needs: [build]
    steps:
      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: sign-win-artifact
          path: output/
      - name: Codesign
        run: |
          TMP_CERT_PATH="$RUNNER_TEMP/cert.pem"
          BUNDLE_PATH=$(find output -name "MEASUR-Setup-*.*.*.exe")

          echo -n "${{ secrets.WIN_CERT_BASE64 }}" | base64 --decode > $TMP_CERT_PATH

          jsign --storetype "${{ secrets.WIN_STORE_TYPE }}" \
                --storepass "${{ secrets.WIN_STORE_SECRET }}" \
                --tsaurl "http://timestamp.sectigo.com" \
                --certfile $TMP_CERT_PATH \
                $BUNDLE_PATH

          OLD_HASH=$(grep -o -P -m 1 '(?<=sha512:\s).*' ./output/latest.yml)
          NEW_HASH=$(gen_hash -f "$BUNDLE_PATH")
          sed -i "s|$OLD_HASH|$NEW_HASH|g" ./output/latest.yml
      - name: Upload release artifact
        uses: actions/upload-artifact@v4
        with:
          name: release-3-artifact
          path: |
            output/*.exe
            output/latest.yml
          compression-level: 1
          if-no-files-found: error
          retention-days: 1
      - name: Cleanup
        run: rm -rf ./output

  release:
    if: github.ref_name == 'master'
    runs-on: ubuntu-22.04
    needs: [build,notarize,sign]
    env:
      VERSION: ${{ needs.build.outputs.BUILD_VERSION }}
    steps:
      - name: Get artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: release-*-artifact
          path: release
          merge-multiple: true
      - name: Release
        uses: softprops/action-gh-release@v1
        # if: startsWith(github.ref, 'refs/tags/') # Uncomment if enabling tag gating
        with:
          name: MEASUR v${{ env.VERSION }}
          tag_name: v${{ env.VERSION }}
          draft: true # Comment out if enabling tag gating and publishing via action
          generate_release_notes: false
          files: |
            release/*
